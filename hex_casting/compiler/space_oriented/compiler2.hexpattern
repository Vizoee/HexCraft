/*


idea:
    everything is on stack and some things take from stack
    what about " - insides shouldnt be processed - requires processing overide
        can apply to comments
    2 events
        on insert on stack
        on processing
        on taking from stack
    variable/value
        variable - shouldnt happen? remove it from stack?
        //     = get variable and set it
        +,-,/,*,^,% - remove it and remove variable/value - returns value
        =,( - just put variable on stack
        function - set function name

    function
        put block on stack

    end
        remove until finds block (function/if/while/for/switch)

variable, sign and function share method(index in list) to get value
    variable - returns value
    sign(+,-,*,/) - gets value of argument 1 and 2, runs function and then returns value
    function - compiles and runs conde and returns value 
        (every function returns some value or null)

should things predict future?
    if yes:
        requires more careful approach - each element must know what will happen next
        simplifies some things - comments, math(if we don't implement ++/--variable), function
    if partially:
        most freedom
        most likely to introduce bugs
    if no:
        more robust?
        will require processing function stack - which is arguably the same as predicting future
        simplifies implementation of most things

math requires rebalancing of tree
anything other than math operators +,-,*,/,( should process math


processing function stack
    can be used to process next commands
    should it be running before or after command

ravenmind
    [0]stack
        [0]type
        [1]get function
        [2]var1
        [3]var2
    [1]identifier list
    [2]variable_count
    [3]parse_function_stack

get_value function
    // stack: obj

identifier
    put on stack:
    [
        [0]type:identifier
        [1]get_value: return value
        [2]value: name
    ]

=
    get identifier from stack
    change it into variable
        change type to variable
        allocate it and set pos

    put on stack
    [
        [0]type:setter
        [1]get_value:get val_2 and set val_1 (and returns set value)
        [2]val_1:identifier or stack_item
        [3]val_2:null
    ]

+
    get identifier or equasion from stack

    put on stack
    [
        [0]type:expression
        [1]get_value:(rebalance tree) get val_2 and set val_1 calculate and return result
        [2]val_1:identifier or stack_item
        [3]val_2:null
    ]

number
    put on stack
    [
        [0]type:value
        [1]get_value:return value
        [2]value
    ]

*/

#def(dict_read)(#git(/hex_casting/programs/dictionary/dictionary_read.hexpattern))

#def(raven_stack)(Numerical Reflection: 0)
#def(raven_ident)(Numerical Reflection: 1)
#def(raven_var_count)(Numerical Reflection: 2)
#def(raven_parse_func_stack)(Numerical Reflection: 3)

#def(stack_obj_type)(Numerical Reflection: 0)
#def(stack_obj_eval)(Numerical Reflection: 1)
#def(stack_obj_val1)(Numerical Reflection: 2)
#def(stack_obj_val2)(Numerical Reflection: 3)

#def(ident_obj_type)(@str(identifier))

// #def(malloc)(
//     // stack: value
//     Muninn's Reflection
//     $raven_var_count
//     Selection Distillation

//     Muninn's Reflection
//     Prospector's Gambit
//     Numerical Reflection: 1
//     Additive Distillation
//     $raven_var_count
//     Jester's Gambit
//     Surgeon's Exaltation

//     Flock's Reflection
//     Subtractive Distillation
//     Numerical Reflection: 2
//     Additive Distillation
//     Fisherman's Gambit
// )

// #def(get_stack_last)(
//     Muninn's Reflection
//     $raven_stack
//     Selection Distillation
//     Numerical Reflection: 0
//     Selection Distillation
// )

// #def(remove_stack_last)(
//     Muninn's Reflection
//     Speaker's Decomposition
//     Speaker's Decomposition
//     Bookkeeper's Gambit: v
//     Speaker's Distillation
//     Huginn's Gambit
// )

#def(pop_stack_last)(
    Muninn's Reflection
    Speaker's Decomposition
    Speaker's Decomposition
    Rotation Gambit II
    Speaker's Distillation
    Huginn's Gambit
    // stack: obj
)

#def(push_stack)(
    // stack: object
    Muninn's Reflection
    Speaker's Decomposition
    Rotation Gambit
    Speaker's Distillation
    Speaker's Distillation
    Huginn's Gambit
)

#def(push_parser)(
    // stack: parser
    Muninn's Reflection
    $raven_parse_func_stack
    Selection Distillation
    Jester's Gambit
    Speaker's Distillation

    Muninn's Reflection
    $raven_parse_func_stack
    Rotation Gambit
    Surgeon's Exaltation
    Huginn's Gambit
)

#deg(remove_parser)(
    Muninn's Reflection
    $raven_parse_func_stack
    Selection Distillation
    Speaker's Decomposition
    Bookkeeper's Gambit: v

    Muninn's Reflection
    $raven_parse_func_stack
    Rotation Gambit
    Surgeon's Exaltation
    Huginn's Gambit
)

#def(get_parser)(
    Muninn's Reflection
    $raven_parse_func_stack
    Selection Distillation
    Numerical Reflection: 0
    Selection Distillation
)

#def(parser_set_val2)(
    // stack: object
    Muninn's Reflection
    Speaker's Decomposition
    Speaker's Decomposition
    $stack_obj_val2
    Numerical Reflection: 4
    Fisherman's Gambit
    Surgeon's Exaltation
    Speaker's Distillation
    Speaker's Distillation
    Huginn's Gambit

    $remove_parser
)

#def(value_obj)(
    // stack: value
    {@str(value)}>>
    {
        // stack: obj
        $stack_obj_val1
        Selection Distillation
    }
    Rotation Gambit
    Numerical Reflection: 3
    Flock's Gambit
)

#def(ident_obj)(
    // stack: name
    {@str(identifier)}>>
    {
        // stack: obj
        $stack_obj_val1
        Selection Distillation
    }
    Rotation Gambit
    Numerical Reflection: 3
    Flock's Gambit
)

#def(setter_obj)(
    // stack: value
    Bookkeeper's Gambit: v
    {@str(setter)}>>

    {

    }

    $pop_stack_last
    Gemini Decomposition
    $stack_obj_type
    Selection Distillation
    {@str(identifier)}>>
    Equality Distillation
    {}
    { // Error
        {@str(Error while parsing '='. Expected identifier but got )}>>
        Jester's Gambit
        $stack_obj_type
        Selection Distillation
        Additive Distillation
        Hermes' Gambit
    }
    Augur's Exaltation
    Hermes' Gambit

    Nullary Reflection

    Numerical Reflection: 4
    Flock's Gambit
)

#def(next_iter)(
    Numerical Reflection: 1
    Additive Distillation
    Numerical Reflection: 2
    Flock's Gambit
    Castor's Gambit
    Atalanta's Gambit
)

// Muninn's Reflection
// Augur's Purification
// {}
// {
//     Vacant Reflection

//     Vacant Reflection

//     Numerical Reflection: 0

//     // {$push_stack}
//     Vacant Reflection
//     Single's Purification

//     Numerical Reflection: 4
//     Flock's Gambit
//     Huginn's Gambit
// }
// Augur's Exaltation
// Hermes' Gambit


Spacing Reflection
Separation Distillation

{
    Flock's Disintegration
    Dioscuri Gambit
    Jester's Gambit
    Length Purification
    Minimus Distillation
    {
        // stack: list, index
        // check if string
        Dioscuri Gambit
        Selection Distillation
        Gemini Decomposition
        Classifier's Purification
        Scrivener's Purification
        {@str(moreiotas:string)}>>
        Equality Distillation
        {}
        {
            {@str(NaS)}>>
            Reveal
            Bookkeeper's Gambit: v

            Bookkeeper's Gambit: v
            $next_iter
        }
        Augur's Exaltation
        Hermes' Gambit
        
        // check if not empty
        Gemini Decomposition
        Augur's Purification
        {}
        {
            {@str(Empty)}>>
            Reveal
            Bookkeeper's Gambit: v

            Bookkeeper's Gambit: v
            $next_iter
        }
        Augur's Exaltation
        Hermes' Gambit

        stack: list, index, string
        Gemini Decomposition
        Input Purification
        Nullary Reflection
        Equality Distillation
        {}
        {
            {@str(aN :3)}>>
            Reveal
            Bookkeeper's Gambit: v

            Input Purification
            $value_obj
            $get_parser
            Hermes' Gambit

            $next_iter
        }
        Augur's Exaltation
        Hermes' Gambit
        

        {
            [
                @str(=)
            ]
            [
                [
                    {@str(aE :3)}>>
                    Reveal
                    Bookkeeper's Gambit: v
                    $setter_obj
                    $get_parser
                    Hermes' Gambit
                    {$parser_set_val2}
                    $push_parser
                ]
            ]
        }
        Prospector's Gambit
        $dict_read

        Gemini Decomposition
        Augur's Purification
        {
            Hermes' Gambit
            $next_iter
        }
        {
            Bookkeeper's Gambit: v
        }
        Augur's Exaltation
        Hermes' Gambit
        
        // else is an identifier
        {@str(Identity OwO :3)}>>
        Reveal
        Bookkeeper's Gambit: v

        $ident_obj
        $get_parser
        Hermes' Gambit
        
        // end stack: list, index
        $next_iter
    }
    {}
    Augur's Exaltation
    Hermes' Gambit
}
Jester's Gambit
Numerical Reflection: 0
Numerical Reflection: 2
Flock's Gambit
Single's Purification
Thoth's Gambit

